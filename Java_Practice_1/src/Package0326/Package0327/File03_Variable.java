package Package0327;

public class File03_Variable {

	public static void main(String[] args) {
		// 변수(Variable)
		// - 프로그램 내에서 데이터를 다루기 위한 가장 기본적인 수단
		// - 데이터를 다루는 데 있어서 가장 기본적으로 수행할 수 있어야 하는
		// 	 기능이 바로 '데이터 저장'이다
		// - 프로그램 내에서 다루는 데이터들을 저장하기 위한 공간
		// - 데이터를 쉽게 다루며, 구분할 수 있도록 이름을 부여한다
		// - 이름을 '식별자(Identifier)' 라고 한다
		// - 리터럴 뿐만 아니라, 사용자의 입력, 연산/처리가 된 데이터들을 저장
		
		// 변수의 필요성
		// - 프로그램 내에서 데이터를 스스로 기억하지 않기 때문에
		// 별도로 저장을 할 필요가 없다
		// - 한 번 저장을 하면 여러 번 재사용 할 수 있다
		// 사용되는 데이터의 용도/목적을 바로 알 수 있다
		
		System.out.println(24); // 현재 나이
		System.out.println(24 + 10); // 10년 뒤의 나이
		// - 작성된 값의 용도/목적을 바로 알 수 있다
		// - 중복된 값을 한 번에 관리가 되지 않는다
		
		// 위의 문제를 해결하기 위해 변수를 사용한다
		System.out.println("---------------------");
		// 변수를 통해서 데이터를 저장하고 사용
		// 1. 변수 선언 = 데이터를 저장하기 위한 공간을 생성
		// - 저장할 데이터의 타입
		// - 저장할 데이터의 용도/목적을 표현한 이름
		int age; // 나이를 저장하기 위한 변수
		
		// 2. 데이터 대입 = 선언된 변수에 데이터를 저장(대입, 할당, 참조 등)
		// - 대입 연산자(=)를 사용하며
		// 좌측에는 변수, 우측에는 데이터(표현식)
		age = 28; // 변수 age에 28을 대입(저장)
		
		// 3. 변수 초기화 = 변수를 선언함과 동시에 데이터를 대입하는 과정
		int years = 10; // 변수 years를 선언하고 10을 대입
		
		// 변수에 저장된 값을 사용
		// 선언된 변수의 식별자를 작성
		// 변수에 저장된 값을 불러온다
		System.out.println(age);
		// -> System.out.println(28);
		System.out.println(age + years);
		// -> System.out.println(28 + 10);
		// -> System.out.println(30);
		
		// 변수는 얼마든지 데이터를 변경할 수 있다
		// 다른 값을 저장할 경우 저장한 이후부터 다른 값을 사용한다
		age = 30; // 변수 age에 30을 대입, 기존의 값은 사라짐
		
		System.out.println(age);
		System.out.println(age + years);
		// -------------------------------------
		// 식별자(Identifier) = ID
		//  - 특수문자는 '_' 와 '$' 만 사용 가능하며
		//	  첫번째 문자로는 사용될 수 없다.
		// 식별자를 작성하기 위한 원칙
		// - 특수문자는 '_', 와 '$'만 사용 가능하며
		// 첫 번째 문자로는 사용될 수 없다.
		// - Java 에서 제공하는 키워드는 사용될 수 없다
		// - 숫자는 첫 번째 문자로 사용될 수 없다
		// - 대소문자 구분이 된다
		// - 식별자의 길이 제한은 없다
		// - 한글을 지원한다 (추천 X)
		
		// 지키면 좋은 사항들(개발자들간의 약속)
		// - 식별자를 목적과 용도를 알 수 있도록 작성
		// - 너무 줄인 약자는 피하는 것이 좋다
		// - 작성 방법
		// - 카멜 케이싱 - 변수(필드), 메서드
		// : 첫 번째 문자는 소문자
		// : 두 번째 단어부터는 첫 문자를 대문자
		// name, age, myName, myAge
		// - 파스칼 케이싱 - 클래스, 패키지 등
		// : 모든 단어의 첫 글자를 대문자
		// String, Scanner, System, ...
		// 		- 스네이크 케이싱 - 상수
		//			: 모든 문자를 대문자
		//			: 단어 사이에 '_'를 작성
		//				CONSTANT_DATA
	}
}
